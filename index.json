[{"content":"\r日常学习记录\r这一部分包括了Conda环境配置、基础部分、常见问题解决\n","date":"22 March 2023","permalink":"/python/","section":"Python 学习","summary":"日常学习记录\r这一部分包括了Conda环境配置、基础部分、常见问题解决","title":"Python 学习"},{"content":"rasterio使用\u003e\rrasterio使用 # 参考\npython栅格数据处理学习记录二之rasterio基础 - 知乎\npython：使用机器学习算法对卫星遥感影像进行分类 - 简书\n使用Rasterio读取栅格数据的实例讲解-面圈网\n1、安装\u003e\r1、安装 # conda install -c conda-forge rasterio conda install -c conda-forge matplotlib rasterio可以读取ENVI标准格式、tif格式等栅格数据\n2、波段计算\u003e\r2、波段计算 # import rasterio from rasterio.plot import show import matplotlib.pyplot as plt import numpy as np import matplotlib.colors as mc # 读取数据 planet_data = rasterio.open(\u0026#39;data/planet/planet-test region_resize10_masked.tif\u0026#39;) datasets = planet_data.read() # 将数据类型修改为float32，并将值除以10000 datasets = datasets.astype(\u0026#39;float32\u0026#39;) / 10000.0 # 更新元数据中的数据类型和波段数 meta = planet_data.meta.copy() meta.update(dtype=\u0026#39;float32\u0026#39;, count=datasets.shape[0]) # 创建输出数据集 with rasterio.open(\u0026#39;data/planet/planet-test region_resize10_masked_reflect.tif\u0026#39;, \u0026#39;w\u0026#39;, **meta) as dst: dst.write(datasets) 3、可视化\u003e\r3、可视化 # import rasterio # 读取栅格数据 datasets = rasterio.open(\u0026#39;data/planet/planet-test region_resize10_masked_VIs\u0026#39;) # 获取所有波段名称 Band_Names = [i for i in datasets.descriptions] # 读取元文件信息 meta = datasets.meta # 可视化 import matplotlib.pyplot as plt from rasterio.plot import show fig, (ax1,ax2,ax3) = plt.subplots(figsize=[21,7], nrows=1,ncols=3) show((datasets, Band_Names.index(\u0026#39;NDVI\u0026#39;)), ax=ax1,cmap=\u0026#39;Reds\u0026#39;,title=\u0026#39;NDVI\u0026#39;) show((datasets, Band_Names.index(\u0026#39;SAVI\u0026#39;)), ax=ax2,cmap=\u0026#39;Greens\u0026#39;,title=\u0026#39;SAVI\u0026#39;) show((datasets, Band_Names.index(\u0026#39;WDRVI\u0026#39;)), ax=ax3,cmap=\u0026#39;Blues\u0026#39;,title=\u0026#39;WDRVI\u0026#39;) ax1.set_axis_off() ax2.set_axis_off() ax3.set_axis_off() # fig.savefig(\u0026#34;pred.png\u0026#34;, bbox_inches=\u0026#39;tight\u0026#39;) plt.show() 去除背景\u003e\r去除背景 # nir,red,green = rs.read(5),rs.read(3),rs.read(2) def normalize(array): \u0026#34;\u0026#34;\u0026#34;Normalizes numpy arrays into scale 0.0 - 1.0\u0026#34;\u0026#34;\u0026#34; array_min, array_max = array.min(), array.max() return ((array - array_min)/(array_max - array_min)) # 标准化 nirn,redn,greenn = normalize(nir),normalize(red),normalize(green) # nirn,redn,greenn = nir,red,green # 图像合成 nrg = np.dstack((nirn, redn, greenn)) # 设置背景 # Choose a threshold value threshold = 0.1 # Create a mask for the background pixels mask = (nirn \u0026lt; threshold) \u0026amp; (redn \u0026lt; threshold) \u0026amp; (greenn \u0026lt; threshold) # Set the background pixels to white in the nrg array nrg[mask] = (1,1,1) # Display the image plt.imshow(nrg) 2、DEMO\u003e\r2、DEMO # # 导包 import rasterio as rio from rasterio.plot import show from sklearn import cluster import matplotlib.pyplot as plt import numpy as np import matplotlib.colors as mc # 读取数据 rs = rio.open(\u0026#39;./data/planet_VIs.tif\u0026#39;) # 可视化 rs_data = rs.read() vmin, vmax = np.nanpercentile(rs_data, (2, 98)) plt.figure() show(rs, vmin=vmin, vmax=vmax,cmap=\u0026#34;gist_ncar\u0026#34;) plt.show() # 数据预处理 rs_data_trans = rs_data.transpose(1,2,0) rs_data.shape, rs_data_trans.shape \u0026gt;\u0026gt; ((7, 694, 757), (694, 757, 7)) rs_data_1d = rs_data_trans.reshape(-1, rs_data_trans.shape[2]) rs_data_1d.shape \u0026gt;\u0026gt; (525358, 7) # 建模 cl = cluster.KMeans(n_clusters=4) # create an object of the classifier param = cl.fit(rs_data_1d) # train it # 输出 img_cl = cl.labels_ img_cl = img_cl.reshape(rs_data_trans[:,:,0].shape) # 保存结果 prof = rs.profile prof.update(count=1) with rio.open(\u0026#39;result.tif\u0026#39;,\u0026#39;w\u0026#39;,**prof) as dst: dst.write(img_cl, 1) # 对比 fig, (ax1,ax2) = plt.subplots(figsize=[15,15], nrows=1,ncols=2) show(rs, cmap=\u0026#39;gray\u0026#39;, vmin=vmin, vmax=vmax, ax=ax1) show(img_cl, ax=ax2) ax1.set_axis_off() ax2.set_axis_off() fig.savefig(\u0026#34;pred.png\u0026#34;, bbox_inches=\u0026#39;tight\u0026#39;) plt.show() ","date":"22 March 2023","permalink":"/python/rasterio/","section":"Python 学习","summary":"rasterio使用\u003e\rrasterio使用 # 参考\npython栅格数据处理学习记录二之rasterio基础 - 知乎\npython：使用机器学习算法对卫星遥感影像进行分类 - 简书\n使用Rasterio读取栅格数据的实例讲解-面圈网\n1、安装\u003e\r1、安装 # conda install -c conda-forge rasterio conda install -c conda-forge matplotlib rasterio可以读取ENVI标准格式、tif格式等栅格数据\n2、波段计算\u003e\r2、波段计算 # import rasterio from rasterio.","title":"rasterio使用"},{"content":"This is a demo site built entirely using Blowfish. It also contains a complete set of theme documentation. Blowfish is flexible and is great for both static page-based content (like this demo) or a traditional blog with a feed of recent posts.\n测试\rBLOG \u0026orarr;\rExplore the [sample pages]to get a feel for what Blowfish can do. If you like what you see, check out the project on Github or read the [Installation guide to get started.\n","date":"22 March 2023","permalink":"/","section":"Welcome to Baniliy! 🎉","summary":"This is a demo site built entirely using Blowfish. It also contains a complete set of theme documentation. Blowfish is flexible and is great for both static page-based content (like this demo) or a traditional blog with a feed of recent posts.","title":"Welcome to Baniliy! 🎉"},{"content":"常用命令\u003e\r常用命令 # # 查看安装过的包 conda list # 查看存在的虚拟环境 conda env list # 检查更新 conda update conda # 创建虚拟环境 conda create -n your_env_name python=x.x # 激活或者切换虚拟环境 activate your_env_name # Windows # 对虚拟环境中安装额外的包 conda install -n your_env_name [package] # 关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本) deactivate env_name # activate root`切回root环境 # 删除虚拟环境 conda remove -n your_env_name --all # 删除环境中的某个包 conda remove --name $your_env_name $package_name jupyter notebook保存文件默认路径更改\u003e\rjupyter notebook保存文件默认路径更改 # 1. 找到配置文件\u003e\r1. 找到配置文件 # jupyter notebook --generate-config 2.更改配置\u003e\r2.更改配置 # 找到字符串 #c.NotebookApp.notebook_dir = \u0026#39;\u0026#39;，去掉该行前面的“#”； 3.修改快捷方式属性\u003e\r3.修改快捷方式属性 # 将目标栏内后缀 %\u0026hellip;% 去除\n","date":"17 February 2023","permalink":"/python/conda/","section":"Python 学习","summary":"常用命令\u003e\r常用命令 # # 查看安装过的包 conda list # 查看存在的虚拟环境 conda env list # 检查更新 conda update conda # 创建虚拟环境 conda create -n your_env_name python=x.x # 激活或者切换虚拟环境 activate your_env_name # Windows # 对虚拟环境中安装额外的包 conda install -n your_env_name [package] # 关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本) deactivate env_name # activate root`切回root环境 # 删除虚拟环境 conda remove -n your_env_name --all # 删除环境中的某个包 conda remove --name $your_env_name $package_name jupyter notebook保存文件默认路径更改\u003e\rjupyter notebook保存文件默认路径更改 # 1.","title":"Conda配置"},{"content":"\r官方文档：\r3.10.0a4 Documentation 参考教程：\rPython 教程\rPython 集合（数组）\u003e\rPython 集合（数组） # Python 编程语言中有四种集合数据类型：\n*列表（List）*是一种有序和可更改的集合。允许重复的成员。 *元组（Tuple）*是一种有序且不可更改的集合。允许重复的成员。 *集合（Set）*是一个无序和无索引的集合。没有重复的成员。 *词典（Dictionary）*是一个无序，可变和有索引的集合。没有重复的成员。 方法 描述 append() 在列表的末尾添加一个元素 clear() 删除列表中的所有元素 copy() 返回列表的副本 count() 返回具有指定值的元素数量。 extend() 将列表元素（或任何可迭代的元素）添加到当前列表的末尾 index() 返回具有指定值的第一个元素的索引 insert() 在指定位置添加元素 pop() 删除指定位置的元素 remove() 删除具有指定值的项目 reverse() 颠倒列表的顺序 sort() 对列表进行排序 元组（Tuple）\u003e\r元组（Tuple） # 元组是有序且不可更改的集合。在 Python 中，元组是用圆括号编写的。\n方法 描述 count() 返回元组中指定值出现的次数。 index() 在元组中搜索指定的值并返回它被找到的位置。 集合（Set）\u003e\r集合（Set） # 集合是无序和无索引的集合。在 Python 中，集合用花括号编写。\n方法 描述 add() 向集合添加元素。 clear() 删除集合中的所有元素。 copy() 返回集合的副本。 difference() 返回包含两个或更多集合之间差异的集合。 difference_update() 删除此集合中也包含在另一个指定集合中的项目。 discard() 删除指定项目。 intersection() 返回为两个其他集合的交集的集合。 intersection_update() 删除此集合中不存在于其他指定集合中的项目。 isdisjoint() 返回两个集合是否有交集。 issubset() 返回另一个集合是否包含此集合。 issuperset() 返回此集合是否包含另一个集合。 pop() 从集合中删除一个元素。 remove() 删除指定元素。 symmetric_difference() 返回具有两组集合的对称差集的集合。 symmetric_difference_update() 插入此集合和另一个集合的对称差集。 union() 返回包含集合并集的集合。 update() 用此集合和其他集合的并集来更新集合。 字典（Dictionary）\u003e\r字典（Dictionary） # 字典是一个无序、可变和有索引的集合。在 Python 中，字典用花括号编写，拥有键和值。\n方法 描述 clear() 删除字典中的所有元素 copy() 返回字典的副本 fromkeys() 返回拥有指定键和值的字典 get() 返回指定键的值 items() 返回包含每个键值对的元组的列表 keys() 返回包含字典键的列表 pop() 删除拥有指定键的元素 popitem() 删除最后插入的键值对 setdefault() 返回指定键的值。如果该键不存在，则插入具有指定值的键。 update() 使用指定的键值对字典进行更新 values() 返回字典中所有值的列表 ","date":"17 February 2023","permalink":"/python/%E5%9F%BA%E7%A1%80/","section":"Python 学习","summary":"官方文档：\r3.10.0a4 Documentation 参考教程：\rPython 教程\rPython 集合（数组）\u003e\rPython 集合（数组） # Python 编程语言中有四种集合数据类型：\n*列表（List）*是一种有序和可更改的集合。允许重复的成员。 *元组（Tuple）*是一种有序且不可更改的集合。允许重复的成员。 *集合（Set）*是一个无序和无索引的集合。没有重复的成员。 *词典（Dictionary）*是一个无序，可变和有索引的集合。没有重复的成员。 方法 描述 append() 在列表的末尾添加一个元素 clear() 删除列表中的所有元素 copy() 返回列表的副本 count() 返回具有指定值的元素数量。 extend() 将列表元素（或任何可迭代的元素）添加到当前列表的末尾 index() 返回具有指定值的第一个元素的索引 insert() 在指定位置添加元素 pop() 删除指定位置的元素 remove() 删除具有指定值的项目 reverse() 颠倒列表的顺序 sort() 对列表进行排序 元组（Tuple）\u003e\r元组（Tuple） # 元组是有序且不可更改的集合。在 Python 中，元组是用圆括号编写的。","title":"常用函数记录"},{"content":"\r","date":"17 February 2023","permalink":"/java/","section":"Java 学习","summary":"\r","title":"Java 学习"},{"content":"设置环境变量\u003e\r设置环境变量 # 新建系统变量 变量名：Maven_Home 变量值：D:\\apache-maven-3.6.3 新建 Path 变量值：%Maven_Home%\\bin 配置 Maven 本地仓库及中央仓库的镜像\u003e\r配置 Maven 本地仓库及中央仓库的镜像 # \u0026lt;!-- 设置本地仓库位置 --\u0026gt; \u0026lt;localRepository\u0026gt;D:\\maven-local-repository\u0026lt;/localRepository\u0026gt; \u0026lt;!-- 配置中央仓库的镜像（改用：阿里云中央仓库镜像）--\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun-maven\u0026lt;/name\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; ","date":"17 February 2023","permalink":"/java/maven/","section":"Java 学习","summary":"设置环境变量\u003e\r设置环境变量 # 新建系统变量 变量名：Maven_Home 变量值：D:\\apache-maven-3.6.3 新建 Path 变量值：%Maven_Home%\\bin 配置 Maven 本地仓库及中央仓库的镜像\u003e\r配置 Maven 本地仓库及中央仓库的镜像 # \u0026lt;!-- 设置本地仓库位置 --\u0026gt; \u0026lt;localRepository\u0026gt;D:\\maven-local-repository\u0026lt;/localRepository\u0026gt; \u0026lt;!-- 配置中央仓库的镜像（改用：阿里云中央仓库镜像）--\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;aliyun-maven\u0026lt;/name\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; ","title":"Maven 配置"},{"content":"\r参考\n系统版本：Windows 11 专业版 版本号：22H2 MySQL版本：5.7.38\n1、MySQL安装包下载\u003e\r1、MySQL安装包下载 # MySQL的版本有很多，这里只安装纯粹的MySQL数据库，不附加任何工具。\nIndex of /mysql/downloads/MySQL-5.7/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror\n在列表中找到 mysql-5.7.38-winx64.msi 进行下载。\n2、MySQL 5.7.38 安装过程\u003e\r2、MySQL 5.7.38 安装过程 # Custom 自定义安装，自定义安装路径\n3、MySQL环境变量配置\u003e\r3、MySQL环境变量配置 # 在Path环境变量中点击新建，将之前设置的安装目录添加进去。如果安装在D盘，环境变量配置如下。后面一定要添加bin目录！！！\n4、MySQL服务的安装与初次登录\u003e\r4、MySQL服务的安装与初次登录 # 以管理员身份启动命令提示符并定位到安装目录的bin目录下\n分别执行安装和初始化命令\nmysqld -install # 提示输出 Service successfully installed mysqld --initialize # 光标退回 在data文件夹下查看初始化密码\n.err文件中临时密码\r[Note] A temporary password is generated for root@localhost: rh)(MBQt,5uV 执行命令启动MySQL服务\nnet start mysql 使用临时密码初次登陆MySQL\nmysql -u root -p 修改root用户的登录密码为1234\nalter user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;123456\u0026#39;; 5、修改MySQL字符集为utf8\u003e\r5、修改MySQL字符集为utf8 # 在MySQL的安装目录中新建文件 my.ini 。文件内容为\n[client]\rdefault-character-set=utf8\r[mysql]\rdefault-character-set=utf8\r[mysqld]\rcharacter-set-server=utf8 以管理员身份启动命令行，重启MySQL服务\nnet stop mysql\rnet start mysql ","date":"17 February 2023","permalink":"/java/mysql/","section":"Java 学习","summary":"参考\n系统版本：Windows 11 专业版 版本号：22H2 MySQL版本：5.7.38\n1、MySQL安装包下载\u003e\r1、MySQL安装包下载 # MySQL的版本有很多，这里只安装纯粹的MySQL数据库，不附加任何工具。\nIndex of /mysql/downloads/MySQL-5.7/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror\n在列表中找到 mysql-5.7.38-winx64.msi 进行下载。\n2、MySQL 5.7.38 安装过程\u003e\r2、MySQL 5.7.38 安装过程 # Custom 自定义安装，自定义安装路径","title":"MySQL 5.7 安装教程"},{"content":"\rError message \u0026ldquo;error:0308010C:digital envelope routines::unsupported\u0026rdquo;\n1、下载 nvm 切换低版本\n2、输入命令行 nvm ls anaillable 查看可用的 node. js 版本号\nnvm ls anaillable 3、输入命令行 nvm install xx. xx. xx (例如：nvm install 16.19.1)\nnvm install xx. xx. xx 4、安装成功后，输入命令行 nvm use node xx. xx. xx (例如：nvm use 16.19.1）即可选择你本地所使用的 Node. js 版本\nnvm use node xx. xx. xx ","date":"17 February 2023","permalink":"/docs/faq/","section":"开发记录","summary":"Error message \u0026ldquo;error:0308010C:digital envelope routines::unsupported\u0026rdquo;\n1、下载 nvm 切换低版本\n2、输入命令行 nvm ls anaillable 查看可用的 node. js 版本号\nnvm ls anaillable 3、输入命令行 nvm install xx. xx. xx (例如：nvm install 16.19.1)\nnvm install xx.","title":"NodeJs 高版本问题"},{"content":"\rSimple, yet powerful. Learn how to use Blowfish and its features.\rThis section contains everything you need to know about Blowfish. If you\u0026rsquo;re new, check out the\n","date":"17 February 2023","permalink":"/docs/","section":"开发记录","summary":"Simple, yet powerful. Learn how to use Blowfish and its features.\rThis section contains everything you need to know about Blowfish. If you\u0026rsquo;re new, check out the","title":"开发记录"},{"content":"ddeerereredddd\n","date":"17 February 2023","permalink":"/docs/test/","section":"开发记录","summary":"ddeerereredddd","title":"Test"},{"content":"","date":"16 February 2023","permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample"},{"content":"标签1 标签1 标签1 标签1 标签1 标签1 标签1 标签1 标签1\nThis area could be used to add some extra decriptive text to each taxonomy. Check out the advanced tag below to see how to take this concept even further.\n","date":"16 February 2023","permalink":"/tags/","section":"Tags","summary":"标签1 标签1 标签1 标签1 标签1 标签1 标签1 标签1 标签1\nThis area could be used to add some extra decriptive text to each taxonomy. Check out the advanced tag below to see how to take this concept even further.","title":"Tags"},{"content":"","date":"16 February 2023","permalink":"/tags/users/","section":"Tags","summary":"","title":"users"},{"content":"\rReal websites that are built with Blowfish.\r这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.\rWebsite Details nunocoracao.com Personal site - Theme author madoke.org Personal site code-chimp.com Personal site ","date":"16 February 2023","permalink":"/users/","section":"Welcome to Baniliy! 🎉","summary":"\rReal websites that are built with Blowfish.\r这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.这是一段提示.\rWebsite Details nunocoracao.com Personal site - Theme author madoke.org Personal site code-chimp.com Personal site ","title":"Users"},{"content":"","date":"13 June 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"1 January 0001","permalink":"/tags/advanced/","section":"Tags","summary":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing.","title":"Advanced"},{"content":"多作者\n","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"多作者","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]